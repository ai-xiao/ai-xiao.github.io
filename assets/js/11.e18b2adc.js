(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{369:function(i,t,e){"use strict";e.r(t);var n=e(42),r=Object(n.a)({},(function(){var i=this,t=i.$createElement,e=i._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[e("h1",{attrs:{id:"项目介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目介绍"}},[i._v("#")]),i._v(" 项目介绍")]),i._v(" "),e("h2",{attrs:{id:"文件结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件结构"}},[i._v("#")]),i._v(" 文件结构")]),i._v(" "),e("hr"),i._v(" "),e("h4",{attrs:{id:"后端结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#后端结构"}},[i._v("#")]),i._v(" 后端结构")]),i._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[i._v("com.jeethink     \n├── jeethink-ui              // 前端框架 [80]\n├── jeethink-gateway         // 网关模块 [8080]\n├── jeethink-auth            // 认证中心 [9200]\n├── jeethink-api             // 接口模块\n│       └── jeethink-api-system                          // 系统接口\n├── jeethink-common          // 通用模块\n│       └── jeethink-common-core                         // 核心模块\n│       └── jeethink-common-datascope                    // 权限范围\n│       └── jeethink-common-log                          // 日志记录\n│       └── jeethink-common-redis                        // 缓存服务\n│       └── jeethink-common-security                     // 安全模块\n│       └── jeethink-common-swagger                      // 系统接口\n├── jeethink-modules         // 业务模块\n│       └── jeethink-system                              // 系统模块 [9201]\n│       └── jeethink-gen                                 // 代码生成 [9202]\n│       └── jeethink-job                                 // 定时任务 [9203]\n├── jeethink-visual          // 图形化管理模块\n│       └── jeethink-visual-monitor                      // 监控中心 [9100]\n├──pom.xml                // 公共依赖\n")])])]),e("h4",{attrs:{id:"前端结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端结构"}},[i._v("#")]),i._v(" 前端结构")]),i._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[i._v("├── build                      // 构建相关  \n├── bin                        // 执行脚本\n├── public                     // 公共文件\n│   ├── favicon.ico            // favicon图标\n│   └── index.html             // html模板\n├── src                        // 源代码\n│   ├── api                    // 所有请求\n│   ├── assets                 // 主题 字体等静态资源\n│   ├── components             // 全局公用组件\n│   ├── directive              // 全局指令\n│   ├── layout                 // 布局\n│   ├── router                 // 路由\n│   ├── store                  // 全局 store管理\n│   ├── utils                  // 全局公用方法\n│   ├── views                  // view\n│   ├── App.vue                // 入口页面\n│   ├── main.js                // 入口 加载组件 初始化等\n│   ├── permission.js          // 权限管理\n│   └── settings.js            // 系统配置\n├── .editorconfig              // 编码格式\n├── .env.development           // 开发环境配置\n├── .env.production            // 生产环境配置\n├── .env.staging               // 测试环境配置\n├── .eslintignore              // 忽略语法检查\n├── .eslintrc.js               // eslint 配置项\n├── .gitignore                 // git 忽略项\n├── babel.config.js            // babel.config.js\n├── package.json               // package.json\n└── vue.config.js              // vue.config.js\n")])])]),e("h2",{attrs:{id:"核心技术"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#核心技术"}},[i._v("#")]),i._v(" 核心技术")]),i._v(" "),e("hr"),i._v(" "),e("blockquote",[e("h4",{attrs:{id:"tip"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tip"}},[i._v("#")]),i._v(" TIP")]),i._v(" "),e("ul",[e("li",[i._v("前端技术栈 ES6、vue、vuex、vue-router、vue-cli、axios、element-ui")]),i._v(" "),e("li",[i._v("后端技术栈 Spring Boot、Spring Cloud & Alibaba、OAuth2")])])]),i._v(" "),e("h4",{attrs:{id:"后端技术"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#后端技术"}},[i._v("#")]),i._v(" 后端技术")]),i._v(" "),e("h4",{attrs:{id:"springboot框架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springboot框架"}},[i._v("#")]),i._v(" SpringBoot框架")]),i._v(" "),e("ol",[e("li",[e("p",[i._v('介绍\nSpring Boot是一款开箱即用框架，提供各种默认配置来简化项目配置。让我们的Spring应用变的更轻量化、更快的入门。 在主程序执行main函数就可以运行。你也可以打包你的应用为jar并通过使用java -jar来运行你的Web应用。它遵循"约定优先于配置"的原则， 使用SpringBoot只需很少的配置，大部分的时候直接使用默认的配置即可。可以与Spring Cloud的微服务无缝结合。\nSpring Boot2.0 环境要求必须是jdk8或以上版本，Tomcat8或以上版本')])]),i._v(" "),e("li",[e("p",[i._v("优点")])])]),i._v(" "),e("ul",[e("li",[i._v("使编码变得简单： 推荐使用注解。")]),i._v(" "),e("li",[i._v("使配置变得简单： 自动配置、快速构建项目、快速集成新技术能力 没有冗余代码生成和XML配置的要求")]),i._v(" "),e("li",[i._v("使部署变得简单： 内嵌Tomcat、Jetty、Undertow等web容器，无需以war包形式部署")]),i._v(" "),e("li",[i._v("使监控变得简单： 自带项目监控")])]),i._v(" "),e("h4",{attrs:{id:"springcloud框架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#springcloud框架"}},[i._v("#")]),i._v(" SpringCloud框架")]),i._v(" "),e("ol",[e("li",[e("p",[i._v("介绍\nSpring Cloud是一系列框架的有序集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发， 如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。 Spring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来， 通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。")])]),i._v(" "),e("li",[e("p",[i._v("优点")])])]),i._v(" "),e("ul",[e("li",[i._v("把模块拆分，使用接口通信，降低模块之间的耦合度。")]),i._v(" "),e("li",[i._v("把项目拆分成若干个子项目，不同的团队负责不同的子项目。")]),i._v(" "),e("li",[i._v("增加功能时只需要再增加一个子项目，调用其他系统的接口就可以。")]),i._v(" "),e("li",[i._v("可以灵活的进行分布式部署。")])]),i._v(" "),e("h4",{attrs:{id:"spring-security安全控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring-security安全控制"}},[i._v("#")]),i._v(" Spring Security安全控制")]),i._v(" "),e("ol",[e("li",[e("p",[i._v("介绍\nSpring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。")])]),i._v(" "),e("li",[e("p",[i._v("优点")])])]),i._v(" "),e("ul",[e("li",[i._v("Authentication： 认证，就是用户登录")]),i._v(" "),e("li",[i._v("Authorization： 授权，判断用户拥有什么权限，可以访问什么资源")]),i._v(" "),e("li",[i._v("安全防护，跨站脚本攻击，session攻击等")]),i._v(" "),e("li",[i._v("非常容易结合Spring进行使用")])]),i._v(" "),e("p",[i._v("3、Spring Security 与 Shiro 的区别")]),i._v(" "),e("p",[i._v("::: 相同点 :::")]),i._v(" "),e("ol",[e("li",[i._v("认证功能")]),i._v(" "),e("li",[i._v("授权功能")]),i._v(" "),e("li",[i._v("加密功能")]),i._v(" "),e("li",[i._v("会话管理")]),i._v(" "),e("li",[i._v("缓存支持")]),i._v(" "),e("li",[i._v("rememberMe功能\n....")])]),i._v(" "),e("p",[i._v("::: 不同点 :::")]),i._v(" "),e("p",[i._v("优点：")]),i._v(" "),e("ol",[e("li",[i._v("Spring Security基于Spring开发，项目如果使用Spring作为基础，配合Spring Security做权限更加方便。而Shiro需要和Spring进行整合开发")]),i._v(" "),e("li",[i._v("Spring Security功能比Shiro更加丰富，例如安全防护方面")]),i._v(" "),e("li",[i._v("Spring Security社区资源相对比Shiro更加丰富")])]),i._v(" "),e("p",[i._v("缺点：")]),i._v(" "),e("ol",[e("li",[i._v("Shiro的配置和使用比较简单，Spring Security上手复杂些")]),i._v(" "),e("li",[i._v("Shiro依赖性低，不需要依赖任何框架和容器，可以独立运行。Spring Security依赖Spring容器")])]),i._v(" "),e("h4",{attrs:{id:"前端技术"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端技术"}},[i._v("#")]),i._v(" 前端技术")]),i._v(" "),e("ul",[e("li",[i._v("npm：node.js的包管理工具，用于同一管理我们前端项目中需要用到的包、插件、工具、命令等，便于开发和维护。")]),i._v(" "),e("li",[i._v("ES6：Javascript的新版本，ECMAScript6的简称。利用ES6我们可以简化我们的JS代码，同时利用其提供的强大功能来快速实现JS逻辑。")]),i._v(" "),e("li",[i._v("vue-cli：Vue的脚手架工具，用于自动生成Vue项目的目录及文件。")]),i._v(" "),e("li",[i._v("vue-router： Vue提供的前端路由工具，利用其我们实现页面的路由控制，局部刷新及按需加载，构建单页应用，实现前后端分离。")]),i._v(" "),e("li",[i._v("vuex：Vue提供的状态管理工具，用于同一管理我们项目中各种数据的交互和重用，存储我们需要用到数据对象。")]),i._v(" "),e("li",[i._v("element-ui：基于MVVM框架Vue开源出来的一套前端ui组件。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);